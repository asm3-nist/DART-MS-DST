}
}
# cat(mass_diff_biasses)
# cat("\n")
PE_perc = PeaksExplained/totAbRef;
MD_bias = sd(mass_diff_biasses)
# check if protonated molecule is in query spectrum
if(min(abs(as.numeric(y[,1][[1]])-prot_mol)) <= tau_ma){
flag = 1;
} else {
flag = 0;
}
results = c(PE_perc,MD_bias,flag)
results
View(asm_revMatchFactor)
x
y
tau_ma
y_mz = as.numeric(y[,1][[1]])
y_ab = as.numeric(y[,2][[1]])
y_ab = y_ab/max(y_ab) # normalize query
x_mz = as.numeric(x[,1][[1]])
x_ab = as.numeric(x[,2][[1]])
x_ab = x_ab/max(x_ab) # normalize reference
y_ab
x_ab
n = length(x_ab)
vector_for_MF_ref = numeric(n)
vector_for_MF_que = numeric(n)
for(i in 1:n){
s1 = abs(y_mz-x_mz[i])
s2 = which(s1 <= tau_ma)
if (length(s2)==0){
#cat("sitch length(s2) == 0\n")
vector_for_MF_ref[i] = x_ab[i];
vector_for_MF_que[i] = 0;
} else {
vector_for_MF_ref[i] = x_ab[i];
#cat(paste0(length(s2),"\n"))
a = y_ab[s2]-x_ab[i]
b = which.min(a);
vector_for_MF_que[i] = y_ab[s2[b]];
}
}
num = sum(as.numeric(vector_for_MF_ref)*as.numeric(vector_for_MF_que))
num
den = sqrt(sum(as.numeric(vector_for_MF_ref)^2)) * sqrt(sum(as.numeric(vector_for_MF_que)^2))
den
MF = num/(den+1e-8)
MF
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
library(shiny); source('RunShinyApp.R')
a = readRDS("shiny/Libraries/RefLibForPaper.RDS")
a[3,PeakLists[3]][[1]]
a[3,PeakLists[3]]
View(a)
a[3,PeakLists[[1]][3]]
b = a[3,PeakLists[[1]][3]]
sprintf("%f",b)
sprintf("%f",b[[1]])
sprintf("%f",b[[2]])
source('RunShinyApp.R')
a = readRDS(Libraries[2])
a = readRDS("shiny/Libraries/RefLibForPaper.RDS")
a[1,PeakLists[[1]][3]]
source('RunShinyApp.R')
a = readRDS("shiny/Libraries/RefLibForPaper.RDS")
b = a[3,PeakLists][[1]][3]
b
source('RunShinyApp.R')
a = readRDS("shiny/Libraries/RefLibForPaper.RDS")
b = a[1,PeakLists][[1]][3]
b
source('RunShinyApp.R')
View(initial_RefLibrary)
a[,PeakLists][[1]]
initial_RefLibrary[,PeakLists][[1]]
initial_RefLibrary[,PeakLists][[2]]
source('RunShinyApp.R')
initial_RefLibrary[,PeakLists][[1]][3]
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
data = readRDS("shiny/Libraries/NIST-DARTMS-Forensics-v1-0.RDS")
colnames(data)
data[,BP]
data[,"BP"]
data[,c("code","BP"]
data[,c("Code","BP"]
data[,c("Code","BP")]
sink("BPdataForEd.txt");cat(data[,c("Code","BP")]);sink()
sink("BPdataForEd.txt");print(data[,c("Code","BP")]);sink()
colnames(data)
sink()
colnames(data)
sink("BPdataForEd.txt");print(data[,c("Code","BP","PrecursorMZ_gen")]);sink()
sink("BPdataForEd.txt");print(data[,c("Code","BP","PrecursorMZ_gen")]);sink()
data = readRDS("shiny/Libraries/NIST-DARTMS-Forensics-v1-0.RDS")
colnames(data)
for(i in 1:dim(data)[1]){cat(paste0(i,"\n"))}
for(i in 1:dim(data)[1]){print(data[i,c("Code","BP","PrecursorMZ")])}
for(i in 1:dim(data)[1]){print(data[i,c("Code","BP","PrecursorMZ_gen")])}
sink("BPForEd.txt");for(i in 1:dim(data)[1]){print(data[i,c("Code","BP","PrecursorMZ_gen")])};sink()
sink("BPForEd.txt");for(i in 1:dim(data)[1]){cat(data[i,c("Code","BP","PrecursorMZ_gen")][[1]])};sink()
sink("BPForEd.txt");for(i in 1:dim(data)[1]){cat(paste0(data[i,c("Code","BP","PrecursorMZ_gen")][[1]],"\n"))};sink()
sink("BPForEd.txt");for(i in 1:dim(data)[1]){cat(paste0(data[i,"Code"],"\t",data[i,"BP"],"\t",data[i,"PrecursorMZ_gen"],"\n"))};sink()
sink("BPForEd.txt");cat("Code\tBP\tProtonatedMolecule\n");for(i in 1:dim(data)[1]){cat(paste0(data[i,"Code"],"\t",data[i,"BP"],"\t",data[i,"PrecursorMZ_gen"],"\n"))};sink()
library(shiny); source('RunShinyApp.R')
source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/RunShinyApp.R')
library(shiny); source('RunShinyApp.R')
library(shiny); source('RunShinyApp.R')
source('RunShinyApp.R')
getwd()
RefLibrary <- readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
colnames(RefLibrary)
RefLibrary[1,PeakLists][[1]]
RefLibrary[1,PeakLists]
library(data.table)
RefLibrary[1,PeakLists]
RefLibrary[1,PeakLists][[1]][1]
hires <- RefLibrary[1,PeakLists][[1]][1]
hires
dev_mode = 0
lb_mode  = 0  # future work: add "library builder" right into program as a third tab rather than have as separate script
# load custom written functions
source("source/Functions/asm-spec2dt.R")
source("source/Functions/asm-bpNormalizer.R")
source("source/Functions/asm-targetMolecules.R")
source("source/Functions/asm-spec2dt_ref.R")
source("source/Functions/asm-revMatchFactor.R")
source("source/Functions/asm-PeaksExplained.R")
source("source/Functions/asm-specImport.R")
source("source/Functions/asm-clc.R")
source("source/Functions/asm-mass-diff.R")
source("shiny/source/asm_externalPackages.R")
source("shiny/source/asm_Header.R")
hires
source('RunShinyApp.R')
source('RunShinyApp.R')
RefLibrary <- readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
RefPeakList = asmspec2dt_ref(RefLibrary[1,PeakLists][[1]][1],RefLibrary[1,PrecursorMZ_gen])
RefPeakList = asm_spec2dt_ref(RefLibrary[1,PeakLists][[1]][1],RefLibrary[1,PrecursorMZ_gen])
RefPeakList
x <- RefPeakList
mz = x[,1]
mz_int = round(mz)
mz_int
mz_int = unique(round(mz))
mz_int
j = which(round(mz)==mz_int[i])
i = 1
j = which(round(mz)==mz_int[i])
round(mz)
mz_int[i]
pmatch(round(mz),mz_int[i])
pmatch(mz_int[i],round(mz))
round(mz)
j = which(round(mz)==mz_int[i])
j = round(mz)==mz_int[i]
j = round(mz[,1])==mz_int[i]
mz = x[,1]
ab = x[,2]
mz_int = unique(round(mz))
mz = x[,1]
ab = x[,2]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
which(mz_int == mz_int_uniqu(1))
which(mz_int == mz_int_unique[(1)]1)
which(mz_int == mz_int_unique[1])
mz_int
mz_int[[1]]
mz_int = round(mz)[[1]]
mz_int
mz_int_unique = unique(mz_int)
mz_int_unique
i =1
j = which(round(mz)==mz_int[i])
j
i =3
j = which(round(mz)==mz_int[i])
j
i =9
j = which(round(mz)==mz_int[i])
ab_int = numeric(length(mz_int_unique))
x
mz = x[,1][[1]]
ab = x[,2][[1]]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
ab_int = numeric(length(mz_int_unique))
for(i in 1:length(mz_int)){
j = which(round(mz)==mz_int[i])
ab_int[i] = sum(ab[j])
}
y = as.data.table(cbind(mz=mz_int_unique,ab=ab_int))
mz
mz_int_unique
mz = x[,1][[1]]
ab = x[,2][[1]]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
ab_int = numeric(length(mz_int_unique))
for(i in 1:length(mz_int)){
j = which(round(mz)==mz_int[i])
ab_int[i] = sum(ab[j])
}
y = as.data.table(cbind(mz_int_uniqueab_int))
colnames(y)==c("mz","ab")
mz = x[,1][[1]]
ab = x[,2][[1]]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
ab_int = numeric(length(mz_int_unique))
for(i in 1:length(mz_int)){
j = which(round(mz)==mz_int[i])
ab_int[i] = sum(ab[j])
}
y = as.data.table(cbind(mz_int_unique,ab_int))
colnames(y)==c("mz","ab")
mz = x[,1][[1]]
ab = x[,2][[1]]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
ab_int = numeric(length(mz_int_unique))
for(i in 1:length(mz_int)){
j = which(round(mz)==mz_int[i])
ab_int[i] = sum(ab[j])
}
y = as.data.table(cbind(mz_int_unique,ab_int))
mz = x[,1][[1]]
ab = x[,2][[1]]
mz_int = round(mz)
mz_int_unique = unique(mz_int)
ab_int = numeric(length(mz_int_unique))
for(i in 1:length(mz_int_unique)){
j = which(mz_int==mz_int_unique[i])
ab_int[i] = sum(ab[j])
}
y = as.data.table(cbind(mz_int_unique,ab_int))
colnames(y)=c("mz","ab")
y
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/Functions/asm-hiRes2loRes.R')
RefPeakList = RefLibrary[4,PeakLists][[1]][1]
asm_hiRes2loRes(RefPeakList)
RefPeakList
RefPeakList = RefLibrary[4,PeakLists][[1]][1]
RefPeakList = asm_spec2dt_ref(RefLibrary[4,PeakLists][[1]][1],RefLibrary[4,PrecursorMZ_gen][[1]])
asm_hiRes2loRes(RefPeakList)
a = asm_hiRes2loRes(RefPeakList)
a
print(a)
a[1,1]
cat(a[1,1])
cat(a[1,mz])
dim(a)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink("lowres-Methamphetamine_30V.txt")
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
RefPeakList = asm_spec2dt_ref(RefLibrary[4,PeakLists][[1]][2],RefLibrary[4,PrecursorMZ_gen][[1]])
a = asm_hiRes2loRes(RefPeakList)
sink("lowres-Methamphetamine_60V.txt")
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
RefPeakList = asm_spec2dt_ref(RefLibrary[4,PeakLists][[1]][3],RefLibrary[4,PrecursorMZ_gen][[1]])
a = asm_hiRes2loRes(RefPeakList)
sink("lowres-Methamphetamine_90V.txt")
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
for(j in 1:4){
for(k in 1:3){
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
a = asm_hiRes2loRes(RefPeakList)
filename = paste0("lowres-",Compounds[j],"_",Energies[k],".txt")
sink(filename)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
}
}
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
for(j in 1:4){
for(k in 1:3){
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
a = asm_hiRes2loRes(RefPeakList)
filename = paste0("lowres-",Compounds[j],"_",Energies[k],"V.txt")
sink(filename)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
}
}
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
for(j in 1:4){
for(k in 1:3){
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
a = asm_hiRes2loRes(RefPeakList)
filename = paste0("lowres-",Compounds[j],"_",Energies[k],"V_computerSimulated.txt")
sink(filename)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
}
}
View(asm_revMatchFactor)
View(asm_PeaksExplained)
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/asm_appServer.R')
source('RunShinyApp.R')
source("source/Functions/asm-hiRes2lowRes.R")
source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/shiny/source/Functions/asm-hiRes2loRes.R')
getwd()
rm(list=ls())
source("shiny/source/asm_externalPackages.R")
shiny::runApp('./shiny/',port=7777)
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
View(asm_revMatchFactor)
View(asm_spec2dt)
View(asm_spec2dt_ref)
Query = asm_spec2dt(asm_specImport("ExampleLowResSpectra_computerGenerated/lowres-Methamphetamine_60V_computerSimulated.txt"))
RefLibrary
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
prot_mol = as.numeric(RefLibrary[4,PPrecursorMZ_gen][[1]])
prot_mol = as.numeric(RefLibrary[4,PrecursorMZ_gen][[1]])
prot_mol
max_mz_considerd = prot_mol + 4
RefPeakList = asm_spec2dt_ref(RefLibrary[4,PeakLists][[1]][2],max_mz_considerd)
RefPeakList = asm_hiRes2lowRes(RefPeakList)
asm_revMatchFactor(RefPeakList,Query,tau_ma)
tau_ma = 1.00
asm_revMatchFactor(RefPeakList,Query,tau_ma)
source('RunShinyApp.R')
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
i = 1
j = 1
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
j = 1
k = 1
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
RefLibrary[k,PrecursorMZ_gen][[1]]
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],RefLibrary[k,PrecursorMZ_gen][[1]])
RefPeakList
max_mz_consider = as.numeric(RefLibrary[k,PrecursorMZ_gen][[1]]) + 4 # to include some isotopic peaks
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],max_mz_consider)
RefPeakList
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
for(j in 1:4){
for(k in 1:3){
max_mz_consider = as.numeric(RefLibrary[k,PrecursorMZ_gen][[1]]) + 4 # to include some isotopic peaks
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],max_mz_consider)
a = asm_hiRes2lowRes(RefPeakList)
filename = paste0("lowres-",Compounds[j],"_",Energies[k],"V_computerSimulated.txt")
sink(filename)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
}
}
source('RunShinyApp.R')
source('RunShinyApp.R')
RefLibrary = readRDS(Libraries[3])
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
prot_mol = as.numeric(RefLibrary[1,PrecursorMZ_gen][[1]])
max_mz_consider = prot_mol + 4
RefPeakList = asm_spec2dt_ref(RefLibrary[1,PeakLists][[1]][3],max_mz_consider)
RefPeakList
RefPeakList = asm_hiRes2lowRes(RefPeakList)
RefPeakList
Query = asm_spec2dt(asm_specImport("ExampleLowResSpectra_computerGenerated/lowres-AcetylFentanyl_90V_computerSimulated.txt"))
tau_ma = 1.00
asm_revMatchFactor(RefPeakList,Query,tau_ma)
x = RefPeakList
y = Query
y_mz = as.numeric(y[,1][[1]])
y_ab = as.numeric(y[,2][[1]])
y_ab = y_ab/max(y_ab) # normalize query
y_mz
y_ab
x_mz
x_mz = as.numeric(x[,1][[1]])
x_ab = as.numeric(x[,2][[1]])
x_ab = x_ab/max(x_ab) # normalize reference
x_mz
y
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
functions = list.files("shiny/source/Functions/")
Compounds = c("AcetylFentanyl","BenzylFentanyl","Amphetamine","Methamphetamine")
Energies = c("30","60","90")
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
functions = list.files("shiny/source/Functions/")
for(i in 1:length(functions)){
file = paste0("shiny/source/Functions/",functions[i]);
source(file)
}
source("shiny/source/asm_externalPackages.R")
dim(RefLibrary)
Libraries = list.files("shiny/Libraries/")
colnames(RefLibrary)
RefLibrary[1,Energies]
source("shiny/source/asm_externalPackages.R")
Libraries = list.files("shiny/Libraries/")
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
rm(list=ls())
source("shiny/source/asm_externalPackages.R")
Libraries = list.files("shiny/Libraries/")
RefLibrary = readRDS("shiny/Libraries/SelectLibrary-ForPaper.RDS")
functions = list.files("shiny/source/Functions/")
for(i in 1:length(functions)){
file = paste0("shiny/source/Functions/",functions[i]);
source(file)
}
nCompounds = dim(RefLibrary)
j = 1
max_k = RefLibrary(j,NumPeakLists)
max_k = RefLibrary[j,NumPeakLists][[1]]
max_k = RefLibrary[j,NumPeakLists]
colnames(RefLibrary)
View(RefLibrary)
RefLibrary[1,Energies][[1]][1]
RefLibrary[1,Energies][[1]][2]
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
length(Libraries)
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
rm(list=ls())
source("shiny/source/asm_externalPackages.R")
functions = list.files("shiny/source/Functions/")
for(i in 1:length(functions)){
file = paste0("shiny/source/Functions/",functions[i]);
source(file)
}
Libraries = list.files("shiny/Libraries/")
Libraries
t = 3
Library = paste0("shiny/Libraries/",Libraries[t]);
RefLibrary = readRDS(Library)
outFolder = paste0(Libraries[t],"-computeGenLowResSpec/")
nCompounds = dim(RefLibrary)
nCompounds = dim(RefLibrary)[1]
for(j in 1:nCompounds){
max_k = RefLibrary[j,NumSpectra]
for(k in 1:max_k){
max_mz_consider = as.numeric(RefLibrary[j,PrecursorMZ_gen][[1]]) + 0 # do we want to include some isotopes of the protonated molecule?
RefPeakList = asm_spec2dt_ref(RefLibrary[j,PeakLists][[1]][k],max_mz_consider)
a = asm_hiRes2lowRes(RefPeakList)
filename = paste0(outFolder,"lowres-",RefLibrary[j,Name],"_",RefLibrary[j,Energies][[1]][k],"_computerSimulated.txt")
sink(filename)
for(i in 1:dim(a)[1]){cat(paste0(a[i,mz],"\t",a[i,ab],"\n"))}
sink()
}
}
filename
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
library(shiny); source('RunShinyApp.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
source('~/Desktop/DART2020/ForGithub/DST/v0/CodeToGenerateLoResExampleSpectra.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
source('RunShinyApp.R')
